AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  iot-backend

  Testing out AppSync and cloudformation

Parameters:
  APIName:
    Type: String
    Description: "Name of the API, for generating names for the various resources"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
  IotTopic:
    Type: String
    Description: "Topic that will route all messages to the Lambda"
    MinLength: 3
    MaxLength: 50

Resources:
  # Cognito UserPool used for authenticting users and locking down AppSync API
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Description: "A Cognito user pool for authenticating users"
    Properties:
      UserPoolName: !Sub ${APIName}-user-pool-
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Description: "App Client used by AWS AppSync"
    Properties:
      ClientName: !Sub ${APIName}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${APIName}-identity-pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources.
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${APIName}-CognitoUnauth-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources.
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${APIName}-CognitoAuth-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: appsync:GraphQL
                Resource:
                  - {
                      Fn::Join:
                        ["", [{ Ref: AppSyncApi }, "/types/Query/fields/*"]],
                    }
                  - {
                      Fn::Join:
                        [
                          "",
                          [{ Ref: AppSyncApi }, "/types/Subscription/fields/*"],
                        ],
                    }
                  - {
                      Fn::Join:
                        ["", [{ Ref: AppSyncApi }, "/types/Mutation/fields/*"]],
                    }

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  # The data store to hold the Sensors and their values.
  DynamoDBSensorsTable:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for AWS AppSync Sensors Type"
    Properties:
      TableName: !Sub ${APIName}-sensors-table
      AttributeDefinitions:
        - AttributeName: "SensorId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "SensorId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # IAM role to allow AppSync access to the Sensor DynamoDB table
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-dynamodb-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join ["", [!GetAtt DynamoDBSensorsTable.Arn, "*"]]

  # The AppSync GraphQL Api. Specifying that out userpool above is used for auth.
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the Sensors App"
    Properties:
      AuthenticationType: "AWS_IAM"
      Name: !Sub ${APIName}

  # The GraphQL schema.
  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Sensor {
          SensorId: ID!
          sensorValue: String
          sensorLocation: String
        }

        type PaginatedSensors {
          sensors: [Sensor!]!
          nextToken: String
        }

        type Query {
          allSensors(limit: Int, nextToken: String): PaginatedSensors!
          getSensor(SensorId: ID!): Sensor
        }

        type Mutation {
          addSensor(SensorId: ID!, sensorValue: Int!, sensorLocation: String!): Sensor
          updateSensorValue(SensorId: ID!, sensorValue: Int!): Sensor
          deleteSensor(SensorId: ID!): Sensor
        }

        type Subscription {
          onAddSensor: Sensor
          @aws_subscribe(mutations: ["addSensor"])

          onUpdateSensorValue: Sensor
          @aws_subscribe(mutations: ["updateSensorValue"])

          onDeleteSensor: Sensor
          @aws_subscribe(mutations: ["deleteSensor"])
        }

        type Schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

  # Telling the AppSync API that the DynamoDB table created above will be used as a data source.
  AppSyncSensorsTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_sensors_table
      Description: "The Sensors Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBSensorsTable
        AwsRegion: !Sub ${AWS::Region}

  # Resolver for allSensors query field
  AppSyncAllSensorsQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: allSensors
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull($ctx.args.limit, 20),
          "nextToken": $util.toJson($ctx.args.nextToken)
        }

      ResponseMappingTemplate: |
        {
          "sensors": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson($ctx.result.nextToken)
        }

  # Resolver for getSensor query field
  AppSyncGetSensorQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for addSensor mutation field
  AppSyncAddSensorMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: addSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId)
          },
          "attributeValues": {
            "sensorValue": $util.dynamodb.toDynamoDBJson($ctx.args.sensorValue),
            "sensorLocation": $util.dynamodb.toDynamoDBJson($ctx.args.sensorLocation)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for updateSensorValue mutation field
  AppSyncUpdateSensorValueMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateSensorValue
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId)
          },
          "update": {
            "expression": "SET sensorValue = :sensorValue",
            "expressionValues": {
              ":sensorValue": $util.dynamodb.toDynamoDBJson($ctx.args.sensorValue)
            }
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for deleteSensor mutation field
  AppSyncDeleteSensorMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Lambda function triggered by data arriving on given topic
  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-function/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - AWSAppSyncInvokeFullAccess
      Environment: # Injecting variables into the lambda runtime
        Variables:
          REGION: !Sub ${AWS::Region}
          GRAPHQL_API: !GetAtt AppSyncApi.GraphQLUrl
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: !Sub SELECT *, topic() as topic FROM ${IotTopic}

Outputs:
  CognitoUserPoolId:
    Description: The Pool ID of the Cognito User Pool
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: The Client ID for AWS AppSync Auth
    Value: !Ref UserPoolClient
  DynamoDBSensorsTableName:
    Description: The name of the DynamoDB Table
    Value: !Ref DynamoDBSensorsTable
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
  LambdaFunctionARN:
    Description: Lambda function ARN
    Value: !GetAtt lambdaFunction.Arn
  IdentityPoolId:
    Description: IdentityPool ID
    Value: !Ref IdentityPool
