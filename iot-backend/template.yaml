AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  iot-backend

  Testing out AppSync and cloudformation

Parameters:
  APIName:
    Type: String
    Description: "Name of the API, for generating names for the various resources"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]*$"

# Role and policy to allow SNS to send SMS for MFA
Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Description: "An IAM Role to allow Cognito to send SNS messages"
    Properties:
      RoleName: !Sub ${APIName}-cognito-sns-role
      ManagedPolicyArns:
        - Ref: CognitoSNSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cognito-idp.amazonaws.com
    DependsOn:
      - CognitoSNSPolicy

  CognitoSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow Amazon Cognito to access SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:publish
            Resource: "*"

  # Cognito UserPool used for authenticting users and lockgin down AppSync API
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Description: "A Cognito user pool for authenticating users"
    Properties:
      UserPoolName: !Sub ${APIName}-user-pool-
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      SmsConfiguration:
        ExternalId: !Sub ${APIName}-external
        SnsCallerArn: !GetAtt SNSRole.Arn
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Description: "App Client used by AWS AppSync"
    Properties:
      ClientName: !Sub ${APIName}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${APIName}-identity-pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # The data store to hold the Sensors and their values.
  DynamoDBSensorsTable:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for AWS AppSync Sensors Type"
    Properties:
      TableName: !Sub ${APIName}-sensors-table
      AttributeDefinitions:
        - AttributeName: "SensorId"
          AttributeType: "S"
        - AttributeName: "UserId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "SensorId"
          KeyType: "HASH"
        - AttributeName: "UserId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # IAM role to allow AppSync access to the Sensor DynamoDB table
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-dynamodb-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join ["", [!GetAtt DynamoDBSensorsTable.Arn, "*"]]

  # The AppSync GraphQL Api. Specifying that out userpool above is used for auth.
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the Sensors App"
    Properties:
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      Name: !Sub ${APIName}
      UserPoolConfig:
        UserPoolId: !Ref UserPoolClient
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: "ALLOW"

  # The GraphQL schema.
  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Sensor {
          SensorId: ID!
          sensorValue: String
          sensorLocation: String
        }

        type PaginatedSensors {
          sensors: [Sensor!]!
          nextToken: String
        }

        type Query {
          allSensors(limit: Int, nextToken: String): PaginatedSensors!
          getSensor(SensorId: ID!): Sensor
        }

        type Mutation {
          addSensor(SensorId: ID!, sensorValue: Int!, sensorLocation: String!): Sensor
          updateSensorValue(SensorId: ID!, sensorValue: Int!): Sensor
          deleteSensor(SensorId: ID!): Sensor
        }

        type Subscription {
          onAddSensor: Sensor
          @aws_subscribe(mutations: ["addSensor"])

          onUpdateSensorValue: Sensor
          @aws_subscribe(mutations: ["updateSensorValue"])

          onDeleteSensor: Sensor
          @aws_subscribe(mutations: ["deleteSensor"])
        }

        type Schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

  # Telling the AppSync API that the DynamoDB table created above will be used as a data source.
  AppSyncSensorsTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_sensors_table
      Description: "The Sensors Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBSensorsTable
        AwsRegion: !Sub ${AWS::Region}

  # Resolver for allSensors query field
  AppSyncAllSensorsQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: allSensors
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull($ctx.args.limit, 20),
          "nextToken": $util.toJson($ctx.args.nextToken)
        }

      ResponseMappingTemplate: |
        {
          "sensors": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson($ctx.result.nextToken)
        }

  # Resolver for getSensor query field
  AppSyncGetSensorQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for addSensor mutation field
  AppSyncAddSensorMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: addSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          },
          "attributeValues": {
            "sensorValue": $util.dynamodb.toDynamoDBJson($ctx.args.sensorValue),
            "sensorLocation": $util.dynamodb.toDynamoDBJson($ctx.args.sensorLocation)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for updateSensorValue mutation field
  AppSyncUpdateSensorValueMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateSensorValue
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          },
          "update": {
            "expression": "SET sensorValue = :sensorValue",
            "expressionValues": {
              ":sensorValue": $util.dynamodb.toDynamoDBJson($ctx.args.sensorValue)
            }
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  # Resolver for deleteSensor mutation field
  AppSyncDeleteSensorMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteSensor
      DataSourceName: !GetAtt AppSyncSensorsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "SensorId": $util.dynamodb.toDynamoDBJson($ctx.args.SensorId),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }

      ResponseMappingTemplate: "$util.toJson($ctx.result)"

Outputs:
  CognitoUserPoolId:
    Description: The Pool ID of the Cognito User Pool
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: The Client ID for AWS AppSync Auth
    Value: !Ref UserPoolClient
  DynamoDBSensorsTableName:
    Description: The name of the DynamoDB Table
    Value: !Ref DynamoDBSensorsTable
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
